// FUSE.JS
(function(){var root=this;var fuzzy={};if(typeof exports!=="undefined"){module.exports=fuzzy}else{root.fuzzy=fuzzy}fuzzy.simpleFilter=function(pattern,array){return array.filter(function(string){return fuzzy.test(pattern,string)})};fuzzy.test=function(pattern,string){return fuzzy.match(pattern,string)!==null};fuzzy.match=function(pattern,string,opts){opts=opts||{};var patternIdx=0,result=[],len=string.length,totalScore=0,currScore=0,pre=opts.pre||"",post=opts.post||"",compareString=opts.caseSensitive&&string||string.toLowerCase(),ch,compareChar;pattern=opts.caseSensitive&&pattern||pattern.toLowerCase();for(var idx=0;idx<len;idx++){ch=string[idx];if(compareString[idx]===pattern[patternIdx]){ch=pre+ch+post;patternIdx+=1;currScore+=1+currScore}else{currScore=0}totalScore+=currScore;result[result.length]=ch}if(patternIdx===pattern.length){return{rendered:result.join(""),score:totalScore}}return null};fuzzy.filter=function(pattern,arr,opts){opts=opts||{};return arr.reduce(function(prev,element,idx,arr){var str=element;if(opts.extract){str=opts.extract(element)}var rendered=fuzzy.match(pattern,str,opts);if(rendered!=null){prev[prev.length]={string:rendered.rendered,score:rendered.score,index:idx,original:element}}return prev},[]).sort(function(a,b){var compare=b.score-a.score;if(compare)return compare;return a.index-b.index})}})();
/*****************************************************************************
 * Actual app code
 */
window.Methone = new function() {

  /*****************************************************************************
   * TEMPLATES
   */
  var Template = function(str) {
    this.template = str || '';

    Object.defineProperties(this, {
      modifier: {
        writable: true,
        value: this._modifier
      }
    });

    return this;
  }

  Object.defineProperties(Template.prototype, {
    _regex: {
      writable: false,
      value: /#{(((?!{).)*)}/g
    },

    _modifier: {
      writable: false,
      value: function(match, key) {
        return this[key] || '';
      }
    },

    parse: {
      writable: false,
      value: function(data) {
        return this.template.replace(this._regex, this.modifier.bind(data));
      }
    }
  });

  /*****************************************************************************
   * State vars
   */

  var html = "<%- html %>";
  var master_fuzzyfile = <%- master_fuzzyfile %>;
  var providers = <%- providers %>;
  var conf = window.tbaas_conf;

  var listitem_template = new Template("<%- listitem_template %>");
  var menuitem_template = new Template("<%- menuitem_template %>");
  var startmenuitem_template = new Template("<%- startmenuitem_template %>");
  var startmenudivider_template = new Template("<%- startmenudivider_template %>");

  var fuzz = [];

  var options = {
    keys: ['str']
  }
  var fuse;

  var processFuzzyFile = function(obj) {
    fuzz = fuzz.concat(obj.fuzzes);
  }




  /*****************************************************************************
   * Conf parsing
   */
  if (conf === undefined) {
    console.error("The config was not supplied!!");
    return;
  }

  conf = {
    system_name: conf.system_name || "default",
    target_id: conf.target_id,
    primary_color: conf.primary_color || "#E2007F",
    secondary_color: conf.secondary_color || "black",
    fuzzyfile: conf.fuzzyfile || false,
    fuzzy_only: conf.fuzzy_only || false,
    topbar_items: conf.topbar_items ||  []
  };


  /*****************************************************************************
   * Injection!
   */
  var root = document.getElementById(conf.target_id);
  var getElementFun = function(d) {
    return document.getElementById(d);
  }


  if ("createShadowRoot" in root) {
    root = root.createShadowRoot();
    getElementFun = function(d) {
      return root.getElementById(d);
    }
  }



  root.innerHTML = html;



      /*****************************************************************************
       * Coloring
       */

      var superdelta = getElementFun("superdelta");
      var startmenu = getElementFun("startmenu");
      var loginbtn = getElementFun("login");

      superdelta.style.backgroundColor = conf.primary_color;
      loginbtn.style.backgroundColor = conf.primary_color;
      loginbtn.style.color = conf.secondary_color;


  if (!conf.fuzzy_only) {
    /*****************************************************************************
     * Menu building
     */

    var buildMenu = function() {
      var str = "";
      for (var i in conf.topbar_items) {
        if ("new_window" in conf.topbar_items[i] && conf.topbar_items[i].new_window) {
          conf.topbar_items[i].target = 'target="_blank"';
        }
        str += menuitem_template.parse(conf.topbar_items[i]);
      }

      getElementFun('methone_nav').innerHTML = str;

    }
    buildMenu();


    /*****************************************************************************
     * StartMenu Setup
     */
    superdelta.addEventListener("click", function(event) {
      if (startmenu.style.opacity == 1) {
        startmenu.style.opacity = 0;
        startmenu.style.display = "none";
      } else {
        startmenu.style.opacity = 1;
        startmenu.style.display = "block";
      }
    });

    var buildStartMenu = function() {
      var str = "";
      for (var i in providers.providers) {
        var p=providers.providers[i];
        if ("divider" in p) {
          str += startmenudivider_template.parse(p)
        } else {
          str += startmenuitem_template.parse(p);
        }
      }

      startmenu.children[0].innerHTML = str;
    }
    buildStartMenu();


  } else { // Fuzz only
    var mh = getElementFun("methone_header");
    mh.parentNode.removeChild(mh);
  }

  /*****************************************************************************
   * Fuzz!!!!!
   */
  var fuzzyModule = function() {
    var txtfuzz = getElementFun("txt_fuzzy");
    var resultfuzz = getElementFun("fuzzy_results");
    var gobox_inner = getElementFun("inner_gobox");
    var input_wrap = getElementFun("input_wrap");

    var selectedElementIndex = 0;
    var numberofresults = 0;


    this.setup = function() {
      processFuzzyFile(master_fuzzyfile);

      /*
      var convd = [];

      for (var i in conf.topbar_items) {
        convd.push({
          name: conf.topbar_items[i].str + " - " + conf.system_name,
          str: conf.topbar_items[i].str,
          href: conf.topbar_items[i].href
        });
      }
      processFuzzyFile({
        fuzzes: convd
      });*/

      txtfuzz.addEventListener("keyup", this.onKeyEntered);
      document.body.addEventListener("keydown", this.onGlobalShortcut);

      fetchLocalFuzzyFile()
    }

    function fetchLocalFuzzyFile() {
      if (!conf.fuzzyfile) return;

      var r = new XMLHttpRequest();
      r.open("GET", conf.fuzzyfile, true);
      r.onreadystatechange = function() {
        if (r.readyState != 4 || r.status != 200) return;
        processFuzzyFile(JSON.parse(r.responseText));
      };
      r.send();
    }

    this.onKeyEntered = function(event) {
      var val = txtfuzz.value;

      if (val) {
        var options = {
            pre: '<b>'
          , post: '</b>'
          , extract: function(el) { return el.name; }
        };
        var results = fuzzy.filter(val, fuzz, options);

        var str = "";
        for (var i in results) {
          var e = {
            name: results[i].string,
            href:results[i].original.href,
            color: results[i].original.color
          };
          str += listitem_template.parse(e);
        }
        resultfuzz.innerHTML = str;
        numberofresults = results.length;
      }


      switch (event.keyCode) {
        case 38: // UP
          event.preventDefault();
          selectedElementIndex = (selectedElementIndex - 1) % numberofresults;
          break;
        case 40: // Down
          selectedElementIndex = (selectedElementIndex + 1) % numberofresults;
          break;
        case 13: // Enter
          document.location = results[selectedElementIndex].original.href;
          resultfuzz.parentNode.parentNode.style.display = "none";
          break;
        default:
          selectedElementIndex = 0;
          break;

      }

      resultfuzz.children[selectedElementIndex].style.background = "rgba(0,0,0,.1)";

    };

    this.onGlobalShortcut = function(event) {

      var box = resultfuzz.parentNode.parentNode;
      if (event.keyCode == 27 && box.style.display != "none") { //escape
        hideDialog()
        return;
      }
      if ((event.metaKey === true || event.ctrlKey === true) && event.keyCode === 75) {
        event.preventDefault();
        var box = resultfuzz.parentNode.parentNode;
        if (box.style.display == "none") {
          showDialog();
        } else {
          hideDialog();
        }
      }
    };

    function setFilter(elem, filter) {
      if (elem==null || !("style" in elem)) return;
      if ("webkitFilter" in elem.style) elem.style.webkitFilter = filter;
      if ("mozFilter" in elem.style) elem.style.mozFilter = filter;
      if ("filter" in elem.style) elem.style.filter = filter;
    }

    function showDialog() {
      var box = resultfuzz.parentNode.parentNode;

      box.style.display = "block";
      txtfuzz.parentNode.style.background = conf.primary_color;
      txtfuzz.focus();

      setFilter(root.getElementById("methone_header"), "grayscale(1) blur(2px)");
      var me = document.getElementById(conf.target_id),
          parent = document.body;
      for (var i in parent.children) {
        if (parent.children[i] != me && "style" in parent.children[i]) {
          parent.children[i].style.transition = "all 200ms ease-out";
          setFilter(parent.children[i], "grayscale(1) blur(2px)");
        }
      }
    }

    
    function hideDialog() {
      var box = resultfuzz.parentNode.parentNode;
      box.style.display = "none";
      setFilter(root.getElementById("methone_header"), "");
      var me = document.getElementById("h"),
          parent = document.body;
      for (var i in parent.children) {
        if (parent.children[i] != me && "style" in parent.children[i]) {
          parent.children[i].style.transform = "";
          parent.children[i].style.webkitFilter = "";
        }
      }
    }

    setTimeout(this.setup, 500); // Let the rest of the page load first
  }();

  /*****************************************************************************
   * API
   */

  this.addFuzzyEntry = function(str, href) {
    fuzz.push({
      str: str,
      href: href
    });
  }

  this.setMenu = function(menuspec) {
    conf.topbar_items = menuspec;
    buildMenu();
  }

  this.setLoginButtonText = function(text) {
    if (!text) {
      loginbtn.style.display = "none";
    } else {
      loginbtn.style.display = "block";
      loginbtn.value = text;
    }
  }
  this.setOnLoginButtonClicked = function(handler) {
    loginbtn.addEventListener("click", handler);
  }
};
